<div class="sidebarPanel" id="sideSubPanel">
    <div class="sidePanelTitle">
        <label>
            <%= sidePanelTitle %>
        </label>
    </div>
    <div class="sidePanelMenu" id="sidePanelSubMenu" open="true">
        <input type="text" id="search" placeholder="検索">
        <ul id="list">
        </ul>
    </div>
</div>

<script>
    let listType = '<%= sidePanelTitle %>';

    document.addEventListener('DOMContentLoaded', async () => {
        let listTag = document.getElementById('list');

        // リストを描画する関数を追加
        async function renderList(type, apiEndpoint) {
            console.log(`${type}リストを取得します: ${apiEndpoint}`);
            try {
                // キャッシュを防ぐためのタイムスタンプを追加
                const timestamp = new Date().getTime();
                const response = await fetch(`${apiEndpoint}?t=${timestamp}`);
                
                if (!response.ok) {
                    throw new Error(`APIエラー: ${response.status}`);
                }
                
                const data = await response.json();
                console.log(`${type}データを取得しました:`, data);
                
                // データの形式に応じて調整（data配列が直接か、data.dataの中にあるか）
                const items = data.data || data;
                
                if (items && items.length > 0) {
                    const newList = await createTableList(items);
                    const listContainer = document.getElementById('list');
                    listContainer.innerHTML = '';
                    listContainer.appendChild(newList);
                } else {
                    document.getElementById('list').innerHTML = '<li>項目が見つかりません</li>';
                }
            } catch (error) {
                console.error(`${type}リストの取得エラー:`, error);
                document.getElementById('list').innerHTML = `<li>エラー: ${error.message}</li>`;
            }
        }

        // delegateClickEvents関数を追加
        function delegateClickEvents() {
            document.getElementById('list').addEventListener('click', async (e) => {
                const target = e.target.closest('a');
                if (!target) return;
                
                e.preventDefault();
                e.stopPropagation();
                
                const type = listType.toLowerCase();
                const name = target.textContent;
                
                try {
                    console.log(`${type}ページへジャンプします: ${name}`);
                    const basePath = '<%= basePath %>';
                    
                    // タイプに応じてジャンプ先URLを構築
                    let jumpUrl;
                    switch (type) {
                        case 'table':
                            jumpUrl = `${basePath}/admin/table/${name}`;
                            break;
                        case 'application':
                            jumpUrl = `${basePath}/admin/application/${name}`;
                            break;
                        case 'script':
                            jumpUrl = `${basePath}/admin/script/${name}`;
                            break;
                        case 'query':
                            jumpUrl = `${basePath}/admin/query/${name}`;
                            break;
                        default:
                            jumpUrl = `${basePath}/admin/`;
                            break;
                    }
                    
                    // ページジャンプ
                    window.location.href = jumpUrl;
                    
                } catch (error) {
                    console.error(`${type}ページジャンプエラー:`, error);
                }
            });
        }

        switch (listType) {
            case 'application':
                renderList('application', '<%= basePath %>/api/models/application');
                break;
            case 'table':
                renderList('table', '<%= basePath %>/api/models/table_def');
                break;
            case 'script':
                console.log('script is selected');
                renderList('script', '<%= basePath %>/api/models/script');
                break;
            case 'query':
                console.log('query is selected');
                renderList('query', '<%= basePath %>/api/models/query_template');
                break;
            default:
                break;
        }
        
        // イベント委譲を設定
        delegateClickEvents();
        
        // 検索機能を追加
        const searchInput = document.getElementById('search');
        searchInput.addEventListener('input', () => {
            const searchText = searchInput.value.toLowerCase();
            const items = document.querySelectorAll('#list li');
            
            items.forEach(item => {
                const text = item.textContent.toLowerCase();
                if (text.includes(searchText)) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });
        });
    });

    async function createTableList(json) {
        const list = document.createElement('ul');
        list.id = 'list';
        json.forEach((element) => {
            const li = document.createElement('li');
            const a = document.createElement('a');
            
            switch (listType) {
                case 'application':
                    a.textContent = element.application_name;
                    break;
                case 'table':
                    a.textContent = element.table_name;
                    break;
                case 'script':
                    a.textContent = element.script_name;
                    break;
                case 'query':
                    a.textContent = element.name;
                    break;
                default:
                    break;
            }
            
            a.href = 'javascript:void(0)';
            a.onmouseover = () => {
                a.style.cursor = 'pointer';
            };
            
            li.appendChild(a);
            list.appendChild(li);
        });
        return list;
    }

</script>