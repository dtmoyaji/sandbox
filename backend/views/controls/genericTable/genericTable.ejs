<!-- シンプル化された genericTable -->
<div class="genericTable" data-table="<%= targetTable %>" data-basepath="<%= basePath %>">
  <div class="table-header">
    <div class="table-toolbar">
      <button id="add-record-btn" class="toolbar-button">新規作成</button>
      <button id="refresh-btn" class="toolbar-button">更新</button>
      <div class="search-container">
        <input type="text" id="search-input" placeholder="検索..." class="search-input">
        <button id="search-btn" class="search-button">検索</button>
      </div>
      <span id="record-count" class="record-count">0 件</span>
    </div>
  </div>
  
  <div class="table-data">
    <table id="data-table" class="data-table">
      <thead id="table-head">
        <tr>
          <!-- テーブルヘッダーは動的に生成されます -->
        </tr>
      </thead>
      <tbody id="table-body">
        <tr>
          <td colspan="100%">
            <div class="loading-container">
              <div class="spinner"></div>
              <p>データを読み込んでいます...</p>
            </div>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  
  <div class="table-footer">
    <div class="pagination">
      <button id="prev-page" class="page-btn">前へ</button>
      <span id="page-info">1 / 1</span>
      <button id="next-page" class="page-btn">次へ</button>
    </div>
  </div>
  
  <!-- オーバーレイ -->
  <div id="overlay" class="overlay"></div>
  
  <!-- レコード編集ペインをインポート -->
  <%- include('./recordEditPane.ejs', { targetTable: targetTable, basePath: basePath }) %>
</div>

<script>
(function() {
  // 基本設定と状態管理
  const state = {
    tableName: '<%= targetTable %>',
    basePath: '<%= basePath %>',
    currentPage: 1,
    totalPages: 1,
    pageSize: 10,
    data: [],
    columns: [],
    searchQuery: '',
    isLoading: true,
    editingRecord: null
  };
  
  // DOM要素の参照
  let domRefs = {};
  
  // 初期化
  document.addEventListener('DOMContentLoaded', init);
  
  // 初期化関数
  function init() {
    // DOM要素の参照を取得
    cacheElements();
    
    // イベントリスナーを設定
    setupEventListeners();
    
    // データを取得
    loadTableData();
  }
  
  // DOM要素をキャッシュ
  function cacheElements() {
    domRefs = {
      tableHead: document.getElementById('table-head'),
      tableBody: document.getElementById('table-body'),
      addButton: document.getElementById('add-record-btn'),
      refreshButton: document.getElementById('refresh-btn'),
      searchInput: document.getElementById('search-input'),
      searchButton: document.getElementById('search-btn'),
      recordCount: document.getElementById('record-count'),
      prevPage: document.getElementById('prev-page'),
      nextPage: document.getElementById('next-page'),
      pageInfo: document.getElementById('page-info'),
      overlay: document.getElementById('overlay'),
      editPane: document.getElementById('record-edit-pane'),
      editPaneTitle: document.getElementById('edit-pane-title'),
      saveRecordBtn: document.getElementById('save-record-btn'),
      cancelEditBtn: document.getElementById('cancel-edit-btn'),
      closeEditBtn: document.getElementById('edit-pane-close')
    };
  }
  
  // イベントリスナーの設定
  function setupEventListeners() {
    // テーブル操作
    domRefs.addButton.addEventListener('click', () => openEditPane());
    domRefs.refreshButton.addEventListener('click', () => loadTableData());
    
    // 検索
    domRefs.searchButton.addEventListener('click', handleSearch);
    domRefs.searchInput.addEventListener('keypress', e => {
      if (e.key === 'Enter') handleSearch();
    });
    
    // ページネーション
    domRefs.prevPage.addEventListener('click', () => navigatePage(-1));
    domRefs.nextPage.addEventListener('click', () => navigatePage(1));
    
    // 編集ペインコントロール
    domRefs.closeEditBtn.addEventListener('click', closeEditPane);
    domRefs.cancelEditBtn.addEventListener('click', closeEditPane);
    domRefs.saveRecordBtn.addEventListener('click', saveRecord);
    
    // オーバーレイクリックで閉じる
    domRefs.overlay.addEventListener('click', closeEditPane);
  }
  
  // 検索処理
  function handleSearch() {
    const query = domRefs.searchInput.value.trim();
    state.searchQuery = query;
    state.currentPage = 1; // 検索時は1ページ目に戻る
    
    // ここで検索キーワードをクエリパラメータ名を修正
    // モデルコントローラが'search'パラメータを明示的に処理していない可能性があるため、
    // リクエストURLにフィルタとして追加する
    loadTableData();
  }
  
  // データ読み込み
  function loadTableData() {
    setLoading(true);
    
    // テーブル名が未定義または空の場合の対策
    if (!state.tableName || state.tableName === 'undefined') {
      console.warn('テーブル名が指定されていません。デフォルトテーブルに設定します。');
      // DOMからテーブル名を取得（フォールバック）
      const tableElement = document.querySelector('.genericTable');
      if (tableElement && tableElement.dataset.table) {
        state.tableName = tableElement.dataset.table;
      } else {
        // デフォルトテーブル名
        state.tableName = 'application';
      }
      console.log(`デフォルトテーブル名を設定しました: ${state.tableName}`);
    }
    
    // 基本URLの構築
    let url = `${state.basePath}/api/models/${state.tableName}?current_page=${state.currentPage}&page_size=${state.pageSize}`;
    
    // 検索クエリがある場合は、サーバーが処理できるようにフィルタパラメータとして追加
    if (state.searchQuery) {
      // 列ごとの検索クエリを作成（状況に応じてカスタマイズ）
      url += `&name=${encodeURIComponent(state.searchQuery)}`;
    }
    
    console.log(`データを取得します: ${url}`);
    
    // データ取得
    fetch(url)
      .then(response => {
        if (!response.ok) throw new Error('データの取得に失敗しました');
        return response.json();
      })
      .then(result => {
        console.log('取得したデータ:', result);
        
        // APIレスポンスから必要なデータを抽出
        state.data = result.data || [];
        
        // tableDefinition.fieldsからカラム情報を取得
        if (result.tableDefinition && result.tableDefinition.fields) {
          state.columns = result.tableDefinition.fields.map(field => ({
            name: field.name,
            label: field.label || field.name
          }));
        } else {
          state.columns = [];
        }
        
        // ページネーション情報を更新
        if (result.pagingInfo) {
          state.currentPage = result.pagingInfo.currentPage;
          state.totalPages = result.pagingInfo.pages;
          state.totalRecords = result.pagingInfo.totalItems;
        }
        
        // UIを更新
        updateUI();
      })
      .catch(error => {
        console.error('Error:', error);
        showErrorMessage('データの読み込み中にエラーが発生しました: ' + error.message);
      })
      .finally(() => {
        setLoading(false);
      });
  }
  
  // UI更新
  function updateUI() {
    // テーブルヘッダーを更新
    updateTableHeader();
    
    // テーブルボディを更新
    updateTableBody();
    
    // ページ情報を更新
    updatePagination();
    
    // レコード数表示を更新
    domRefs.recordCount.textContent = `${state.totalRecords || 0} 件`;
  }
  
  // テーブルヘッダーの更新
  function updateTableHeader() {
    if (!state.columns.length) return;
    
    const headerRow = document.createElement('tr');
    
    // カラムヘッダーを追加
    state.columns.forEach(column => {
      const th = document.createElement('th');
      th.textContent = column.label || column.name;
      headerRow.appendChild(th);
    });
    
    // アクション列を追加
    const actionTh = document.createElement('th');
    actionTh.textContent = 'アクション';
    headerRow.appendChild(actionTh);
    
    // テーブルヘッダーを更新
    domRefs.tableHead.innerHTML = '';
    domRefs.tableHead.appendChild(headerRow);
  }
  
  // テーブルボディの更新
  function updateTableBody() {
    domRefs.tableBody.innerHTML = '';
    
    if (!state.data.length) {
      const emptyRow = document.createElement('tr');
      const emptyCell = document.createElement('td');
      emptyCell.colSpan = (state.columns.length || 1) + 1; // +1 for actions column
      emptyCell.textContent = 'データがありません';
      emptyCell.className = 'empty-table-cell';
      emptyRow.appendChild(emptyCell);
      domRefs.tableBody.appendChild(emptyRow);
      return;
    }
    
    // 各行のデータを追加
    state.data.forEach(record => {
      const row = document.createElement('tr');
      row.className = 'data-row';
      row.dataset.id = record.id;
      
      // 各列のデータを追加
      state.columns.forEach(column => {
        const cell = document.createElement('td');
        cell.textContent = record[column.name] || '';
        cell.className = 'clickable-cell';
        // セルにクリックイベントを追加
        cell.addEventListener('click', () => {
          openEditPane(record);
        });
        row.appendChild(cell);
      });
      
      // アクションボタンを追加
      const actionCell = document.createElement('td');
      
      const editBtn = document.createElement('button');
      editBtn.className = 'action-btn edit-btn';
      editBtn.textContent = '編集';
      editBtn.addEventListener('click', (e) => {
        e.stopPropagation(); // イベントの伝播を停止
        openEditPane(record);
      });
      
      const deleteBtn = document.createElement('button');
      deleteBtn.className = 'action-btn delete-btn';
      deleteBtn.textContent = '削除';
      deleteBtn.addEventListener('click', (e) => {
        e.stopPropagation(); // イベントの伝播を停止
        confirmDelete(record);
      });
      
      actionCell.appendChild(editBtn);
      actionCell.appendChild(deleteBtn);
      row.appendChild(actionCell);
      
      domRefs.tableBody.appendChild(row);
    });
  }
  
  // ページネーションの更新
  function updatePagination() {
    domRefs.pageInfo.textContent = `${state.currentPage} / ${state.totalPages}`;
    
    // 前ページボタンの状態
    domRefs.prevPage.disabled = state.currentPage <= 1;
    domRefs.prevPage.classList.toggle('btn-disabled', state.currentPage <= 1);
    
    // 次ページボタンの状態
    domRefs.nextPage.disabled = state.currentPage >= state.totalPages;
    domRefs.nextPage.classList.toggle('btn-disabled', state.currentPage >= state.totalPages);
  }
  
  // ページ移動
  function navigatePage(direction) {
    const newPage = state.currentPage + direction;
    
    if (newPage < 1 || newPage > state.totalPages) return;
    
    state.currentPage = newPage;
    loadTableData();
  }
  
  // 編集ペインを開く
  function openEditPane(record = null) {
    console.log('レコード編集ペインを開きます:', record);
    state.editingRecord = record ? { ...record } : {};
    
    // ペインタイトルを設定
    domRefs.editPaneTitle.textContent = record ? 'レコード編集' : '新規レコード作成';
    
    // レコードデータをフォームに設定
    if (record && typeof window.drawRecord === 'function') {
      window.drawRecord(record);
    }
    
    // オーバーレイとペインを表示（直接スタイルも設定）
    domRefs.overlay.classList.add('visible');
    domRefs.editPane.classList.add('visible');
    
    console.log('ペインとオーバーレイの表示状態:', {
      overlayClass: domRefs.overlay.className,
      paneClass: domRefs.editPane.className
    });
  }
  
  // 編集ペインを閉じる
  function closeEditPane() {
    domRefs.overlay.classList.remove('visible');
    domRefs.editPane.classList.remove('visible');
    state.editingRecord = null;
    
    // フォームのリセット
    const form = document.getElementById('record-edit-form');
    if (form) form.reset();
  }
  
  // レコード保存
  function saveRecord() {
    // フォームからデータを収集
    const form = document.getElementById('record-edit-form');
    const formData = new FormData(form);
    const record = {};
    
    for (const [key, value] of formData.entries()) {
      record[key] = value;
    }
    
    // IDがあれば更新、なければ作成
    const isUpdate = !!state.editingRecord.id;
    if (isUpdate) {
      record.id = state.editingRecord.id;
    }
    
    const url = `${state.basePath}/api/models/${state.tableName}${isUpdate ? `/${state.editingRecord.id}` : ''}`;
    const method = isUpdate ? 'PUT' : 'POST';
    
    // API呼び出し
    fetch(url, {
      method,
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(record)
    })
      .then(response => {
        if (!response.ok) throw new Error('保存に失敗しました');
        return response.json();
      })
      .then(() => {
        // 成功したらペインを閉じてテーブルを更新
        closeEditPane();
        loadTableData();
      })
      .catch(error => {
        console.error('Error:', error);
        showErrorMessage('保存中にエラーが発生しました: ' + error.message);
      });
  }
  
  // 削除確認
  function confirmDelete(record) {
    if (!confirm('このレコードを削除してもよろしいですか？')) return;
    
    const url = `${state.basePath}/api/models/${state.tableName}/${record.id}`;
    
    fetch(url, {
      method: 'DELETE'
    })
      .then(response => {
        if (!response.ok) throw new Error('削除に失敗しました');
        return response.json();
      })
      .then(() => {
        // テーブルを更新
        loadTableData();
      })
      .catch(error => {
        console.error('Error:', error);
        showErrorMessage('削除中にエラーが発生しました: ' + error.message);
      });
  }
  
  // ローディング状態の設定
  function setLoading(isLoading) {
    state.isLoading = isLoading;
    
    if (isLoading) {
      domRefs.tableBody.innerHTML = `
        <tr>
          <td colspan="${(state.columns.length || 1) + 1}">
            <div class="loading-container">
              <div class="spinner"></div>
              <p>データを読み込んでいます...</p>
            </div>
          </td>
        </tr>
      `;
    }
  }
  
  // エラーメッセージの表示
  function showErrorMessage(message) {
    alert(message);
  }
})();
</script>