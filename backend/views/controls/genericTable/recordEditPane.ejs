<style>
  .record-edit-pane .edit-pane-footer {
    display: flex;
    justify-content: flex-end;
    padding: 10px;
    gap: 10px;
  }
  
  .record-edit-pane .save-btn, 
  .record-edit-pane .cancel-btn,
  .record-edit-pane .delete-btn {
    padding: 8px 15px;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    border: none;
  }
  
  .record-edit-pane .save-btn {
    background-color: #007bff;
    color: white;
  }
  
  .record-edit-pane .cancel-btn {
    background-color: #6c757d;
    color: white;
  }
  
  .record-edit-pane .delete-btn {
    background-color: #dc3545;
    color: white;
    margin-right: auto; /* 左寄せにするため */
  }
</style>
<div id="record-edit-pane" class="record-edit-pane">
    <div class="edit-pane-header">
        <h3 id="edit-pane-title">レコード編集</h3>
        <button class="close-button" id="edit-pane-close">&times;</button>
    </div>
    <div class="edit-pane-body">
        <form id="record-edit-form">
            <!-- フォームフィールドは動的に生成されます -->
        </form>
    </div>
    <div class="edit-pane-footer">
        <button type="button" id="delete-record-btn" class="delete-btn">削除</button>
        <button type="button" id="save-record-btn" class="save-btn">保存</button>
        <button type="button" id="cancel-edit-btn" class="cancel-btn">キャンセル</button>
    </div>
</div>

<script>
  var targetTable = '<%= targetTable %>';

  document.addEventListener('DOMContentLoaded', async function() {
    await createEditControls();
  });

  async function createEditControls() {
    var inputControlls = document.getElementById('record-edit-form');
    console.log('createEditControls');
    var tableInfo = await fetch(`<%= basePath %>/api/models/tableDefinition/${targetTable}`);
    var tableInfoJson = await tableInfo.json();
    var fields = tableInfoJson.fields;
    console.log(fields);
    for (var i = 0; i < fields.length; i++) {
      var field = fields[i];
      var formGroup = document.createElement('div');
      formGroup.setAttribute('class', 'form-group');
      var label = document.createElement('label');
      label.textContent = field.name;
      label.setAttribute('for', field.name);
      label.setAttribute('class', 'form-label');

      var input = createInputTag(field);
      if (field.primaryKey === true || field.notNull === true) {
        label.textContent += ' (*)';
        input.setAttribute('required', 'true');
      }
      if (field.primaryKey === true) {
        input.setAttribute('primary', 'true');
        // 主キーで自動採番の場合は読み取り専用に
        if (field.autoIncrement) {
          input.setAttribute('readonly', 'true');
        }
      }

      formGroup.appendChild(label);
      formGroup.appendChild(input);
      inputControlls.appendChild(formGroup);
    }
  }

  function createInputTag(field) {
    var result = undefined;
    switch (field.type) {
      case 'TEXT':
        result = createTextInput(field);
        break;
      case 'INTEGER':
      case 'BIGINT':
      case 'SMALLINT':
        result = createNumberInput(field);
        break;
      case 'DECIMAL':
      case 'NUMERIC':
      case 'REAL':
      case 'DOUBLE PRECISION':
        result = createFloatInput(field);
        break;
      case 'BOOLEAN':
        result = createBooleanInput(field);
        break;
      case 'DATE':
        result = createDateInput(field);
        break;
      case 'TIME':
        result = createTimeInput(field);
        break;
      case 'TIMESTAMP':
      case 'TIMESTAMP WITH TIME ZONE':
        result = createDateTimeInput(field);
        break;
      default:
        result = createStringInput(field);
        break;
    }
    return result;
  }

  // string field input as input type text
  function createStringInput(field) {
    var input = document.createElement('input');
    input.setAttribute('type', 'text');
    input.setAttribute('name', field.name);
    input.setAttribute('class', 'form-control');
    if (field.maxLength) {
      input.setAttribute('maxlength', field.maxLength);
    }
    return input;
  }

  // text field input as textarea
  function createTextInput(field) {
    var input = document.createElement('textarea');
    input.setAttribute('name', field.name);
    input.setAttribute('class', 'form-control');
    input.setAttribute('rows', '3');
    return input;
  }

  // number field input
  function createNumberInput(field) {
    var input = document.createElement('input');
    input.setAttribute('type', 'number');
    input.setAttribute('name', field.name);
    input.setAttribute('class', 'form-control');
    input.setAttribute('step', '1');
    return input;
  }

  // float field input
  function createFloatInput(field) {
    var input = document.createElement('input');
    input.setAttribute('type', 'number');
    input.setAttribute('name', field.name);
    input.setAttribute('class', 'form-control');
    input.setAttribute('step', '0.01');
    return input;
  }

  // boolean field input
  function createBooleanInput(field) {
    var container = document.createElement('div');
    container.setAttribute('class', 'checkbox-container');
    
    var input = document.createElement('input');
    input.setAttribute('type', 'checkbox');
    input.setAttribute('name', field.name);
    input.setAttribute('id', `${field.name}_check`);
    input.setAttribute('class', 'form-control-checkbox');
    
    container.appendChild(input);
    return container;
  }

  // date field input
  function createDateInput(field) {
    var input = document.createElement('input');
    input.setAttribute('type', 'date');
    input.setAttribute('name', field.name);
    input.setAttribute('class', 'form-control');
    return input;
  }

  // time field input
  function createTimeInput(field) {
    var input = document.createElement('input');
    input.setAttribute('type', 'time');
    input.setAttribute('name', field.name);
    input.setAttribute('class', 'form-control');
    return input;
  }

  // datetime field input
  function createDateTimeInput(field) {
    var input = document.createElement('input');
    input.setAttribute('type', 'datetime-local');
    input.setAttribute('name', field.name);
    input.setAttribute('class', 'form-control');
    return input;
  }

  function drawRecord(recordData) {
    console.log('Drawing record data:', recordData);
    var record = typeof recordData === 'string' ? JSON.parse(recordData) : recordData;
    var formGroups = document.querySelectorAll('.form-group');
    
    for (var i = 0; i < formGroups.length; i++) {
      var formGroup = formGroups[i];
      var input = formGroup.querySelector('input, textarea, select');
      
      if (!input) continue;
      
      var fieldName = input.getAttribute('name');
      if (!fieldName || record[fieldName] === undefined) continue;
      
      // 型に応じて値をセット
      if (input.type === 'checkbox') {
        input.checked = Boolean(record[fieldName]);
      } else if (input.type === 'datetime-local' && record[fieldName]) {
        // ISO8601形式の日時からローカルのdatetime-local形式に変換
        try {
          const date = new Date(record[fieldName]);
          // ISO形式の文字列を取得して、"Z"（UTCを示す）を除去
          let isoString = date.toISOString();
          // datetime-local要素が必要とする形式（YYYY-MM-DDThh:mm）に変換
          input.value = isoString.substring(0, isoString.indexOf('Z')).substring(0, 16);
        } catch (e) {
          console.error('日時変換エラー:', e);
          input.value = '';
        }
      } else if (input.type === 'date' && record[fieldName]) {
        // 日付のみの場合
        try {
          const date = new Date(record[fieldName]);
          input.value = date.toISOString().split('T')[0];
        } catch (e) {
          console.error('日付変換エラー:', e);
          input.value = '';
        }
      } else {
        input.value = record[fieldName];
      }
    }
  }
    // グローバルに関数を公開
  window.drawRecord = drawRecord;

  // 削除確認ダイアログを表示する関数
  function confirmDelete() {
    return confirm('このレコードを削除してもよろしいですか？');
  }

  // 削除ボタンのクリックイベントリスナーを設定（グローバルに公開）
  window.setupDeleteButton = function(deleteCallback) {
    const deleteButton = document.getElementById('delete-record-btn');
    if (deleteButton) {
      deleteButton.addEventListener('click', function() {
        if (confirmDelete()) {
          deleteCallback();
        }
      });
    }
  };
</script>