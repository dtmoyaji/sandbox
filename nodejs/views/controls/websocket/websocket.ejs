<script>
    async function getL10n(tagId) {
        var tag = document.getElementById(tagId);
        if (tag) {
            let dst = await fetch('/api/models/l10n?src=' + tag.innerText);
            let dstJson = (await dst.json()).data;
            if (dstJson.length > 0) {
                tag.innerText = dstJson[0].dst;
            }
        }
    }

    // UUIDを生成する関数
    function generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    // クッキーからユーザー名を取得する。
    function getCurrentUser() {
        if(current_user) {
            return current_user;
        }
        
        let result = undefined;
        const cookie = document.cookie;
        const cookieArray = cookie.split(';');
        for (let i = 0; i < cookieArray.length; i++) {
            const cookieItem = cookieArray[i].split('=');
            if (cookieItem[0].trim() === 'x-user') {
                result = cookieItem[1];
            }
        }
        if( !result ) {
            result = generateUUID();
        }
        return result;
    }

    // websocketの実装
    var current_user = getCurrentUser();
    // 現在のurlを取得
    var baseUrl = `${location.hostname}${location.port ? ':' + location.port : ''}`;
    console.log('baseUrl:', baseUrl);
    var websoc_protocol = location.protocol === 'https:' ? 'wss' : 'ws';
    var websocket = new WebSocket(`${websoc_protocol}://${baseUrl}<%= basePath %>/ws?currentUser=${current_user}`);
    window.websocket = websocket;

    websocket.onopen = function () {
        console.log('WebSocket connected');
        sendMessage(JSON.stringify({ "message": `Hello, ${getCurrentUser()}!` }));
    };

    websocket.onmessage = function (event) {
        const data = JSON.parse(event.data);
        if (data.message) {
            document.getElementById('message').innerText = data.message;
        }
    };

    websocket.onclose = function () {
        console.log('WebSocket closed');
    };

    websocket.onerror = function (error) {
        console.error('WebSocket Error:', error);
    };

    function sendMessage(payload) {
        websocket.send(payload);
    }

</script>
