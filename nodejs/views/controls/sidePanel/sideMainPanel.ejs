<div class="sidebarPanel" id="sideMainPanel">
    <div class="sidePanelTitle">
        <label><a href="<%= basePath %>/admin"><%= sidePanelTitle %></a></label>
    </div>
    <div class="sidePanelMenu" id="sidePanelMainMenu" open="true">
        <ul>
            <li><a href="<%= basePath %>/admin/application" id="link_app"><%= translations['application'] %></a></li>
            <li><a href="<%= basePath %>/admin/table" id="link_table"><%= translations['table'] %></a></li>
            <li><a href="<%= basePath %>/admin/query"><%= translations['クエリ'] %></a></li>
            <li><a href="<%= basePath %>/admin/script"><%= translations['スクリプト'] %></a></li>
        </ul>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', async () => {
        // アプリケーションリンクがクリックされたときの処理
        const appLink = document.getElementById('link_app');
        if (appLink) {
            appLink.addEventListener('click', async function(e) {
                e.preventDefault(); // デフォルトのナビゲーションを防止
                
                // URLを更新（ブラウザの履歴に追加）
                const url = this.getAttribute('href');
                window.history.pushState({}, '', url);
                
                try {
                    // アプリケーション一覧を取得
                    const response = await fetch('<%= basePath %>/api/models/application');
                    if (!response.ok) {
                        throw new Error('アプリケーション一覧の取得に失敗しました');
                    }
                    
                    const result = await response.json();
                    const appList = result.data || [];
                    
                    // サイドサブパネルが既に存在する場合は削除
                    const existingSubPanel = document.getElementById('sideSubPanel');
                    if (existingSubPanel) {
                        existingSubPanel.remove();
                    }
                    
                    // サイドサブパネルを作成
                    const subPanel = document.createElement('div');
                    subPanel.className = 'sidebarPanel';
                    subPanel.id = 'sideSubPanel';
                    
                    // サイドサブパネルのタイトル
                    const titleDiv = document.createElement('div');
                    titleDiv.className = 'sidePanelTitle';
                    const titleLabel = document.createElement('label');
                    titleLabel.textContent = 'application';
                    titleDiv.appendChild(titleLabel);
                    subPanel.appendChild(titleDiv);
                    
                    // サイドサブパネルのメニュー
                    const menuDiv = document.createElement('div');
                    menuDiv.className = 'sidePanelMenu';
                    menuDiv.id = 'sidePanelSubMenu';
                    menuDiv.setAttribute('open', 'true');
                    
                    // 検索入力フィールド
                    const searchInput = document.createElement('input');
                    searchInput.type = 'text';
                    searchInput.id = 'search';
                    searchInput.placeholder = '検索';
                    menuDiv.appendChild(searchInput);
                    
                    // アプリケーションリスト
                    const ul = document.createElement('ul');
                    ul.id = 'list';
                    
                    // リストアイテムの作成
                    appList.forEach(app => {
                        const li = document.createElement('li');
                        const a = document.createElement('a');
                        a.href = '<%= basePath %>/admin/application/' + app.application_name;
                        a.textContent = app.application_name;
                        a.style.cursor = 'pointer';
                        li.appendChild(a);
                        ul.appendChild(li);
                    });
                    
                    menuDiv.appendChild(ul);
                    subPanel.appendChild(menuDiv);
                    
                    // サイドサブパネルをDOMに追加
                    const mainPanel = document.getElementById('sideMainPanel');
                    mainPanel.parentNode.insertBefore(subPanel, mainPanel.nextSibling);
                    
                    // 検索機能の実装
                    searchInput.addEventListener('input', function() {
                        const searchValue = this.value.toLowerCase();
                        const listItems = ul.querySelectorAll('li');
                        
                        listItems.forEach(item => {
                            const text = item.textContent.toLowerCase();
                            if (text.includes(searchValue)) {
                                item.style.display = '';
                            } else {
                                item.style.display = 'none';
                            }
                        });
                    });
                    
                } catch (error) {
                    console.error('アプリケーション一覧の読み込み中にエラーが発生しました:', error);
                    alert('アプリケーション一覧の読み込みに失敗しました');
                }
            });
        }
    });
</script>