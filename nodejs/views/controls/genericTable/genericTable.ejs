<div class="genericTable">
  <div class="table-controller" id="table-controller-top"></div>
  <div class="table-data">
    <table class="table-body"></table>
  </div>
  <div class="table-controller" id="table-controller-bottom"></div>
  <div class="recordEditPanel" visible="false">
    <%- include('./recordEditPane.ejs') %>
    <div class="bottom-panel">
      <button class="close-button" data-panel-type="recordEditPanel">Close</button>
    </div>
  </div>
  <div class="filterPanel" visible="false">
    <div class="bottom-panel">
      <button class="close-button" data-panel-type="filterPanel">Close</button>
    </div>
  </div>
</div>

<script>
  // パネル操作用のユーティリティ関数
  function showPanel(panelSelector) {
    const panel = document.querySelector(panelSelector);
    if (panel) {
      panel.setAttribute('visible', 'true');
    }
  }

  function hidePanel(panelSelector) {
    const panel = document.querySelector(panelSelector);
    if (panel) {
      panel.setAttribute('visible', 'false');
    }
  }

  document.addEventListener('DOMContentLoaded', async function() {

    let request_param = '<%- JSON.stringify(params) %>';
    console.log(request_param);
    let parameters = JSON.parse(request_param).query;

    let getParams = '';
    for (let key in parameters) {
      getParams += `${key}=${parameters[key]}&`;
    }
    getParams = getParams.slice(0, -1);

    let tableName = '<%= targetTable %>';
    let params = JSON.parse(request_param).query;

    let table = await fetch(`<%= basePath %>/api/models/${tableName}?${getParams}`);
    let tableData = await table.json();
    params['writeable'] = tableData.writeable;
    let tableController = document.querySelector('.table-controller');
    let tableBody = document.querySelector('.table-body');

    let tableHeader = document.createElement('tr');

    // th タグを作成
    console.log(tableData.tableDefinition.fields);
    let columnHeaders = tableData.tableDefinition.fields;
    for (let idx in columnHeaders) {
      let cell = document.createElement('th');
      cell.textContent = columnHeaders[idx].name;
      tableHeader.appendChild(cell);
    }
    tableBody.appendChild(tableHeader);

    // td タグを作成
    for (let i = 0; i < tableData.data.length; i++) {
      let row = document.createElement('tr');
      row.setAttribute('odd', odd = i % 2 === 0 ? 'true' : 'false');
      let rowJson = {};
      for (let key in tableData.data[i]) {
        let cell = document.createElement('td');
        cell.textContent = tableData.data[i][key];
        rowJson[key] = tableData.data[i][key];
        row.appendChild(cell);
        row.setAttribute('record', JSON.stringify(rowJson));
      }
      tableBody.appendChild(row);
      row.addEventListener('click', () => {
        let recordData = row.getAttribute('record');
        drawRecord(recordData);
        showPanel('.recordEditPanel');
      });
    }

    // コントロールバーを生成
    let pagingInfo = tableData.pagingInfo;
    let tableControllerTop = document.getElementById('table-controller-top');
    let controlBarTop = await generateControlBar(pagingInfo, 'control-bar-top', params);
    tableControllerTop.appendChild(controlBarTop);

    let tableControllerBottom = document.getElementById('table-controller-bottom');
    let controlBarBottom = await generateControlBar(pagingInfo, 'control-bar-bottom', params);
    tableControllerBottom.appendChild(controlBarBottom);

    modifyCss();

    // Closeボタンのイベントリスナーを追加
    document.querySelectorAll('.close-button').forEach(button => {
      button.addEventListener('click', function() {
        const panelType = this.getAttribute('data-panel-type');
        if (panelType) {
          hidePanel(`.${panelType}`);
        }
      });
    });

  });

  async function generateControlBar(pagingInfo, tag_id, params) {
    let currentURL = window.location.href;
    console.log(currentURL);
    console.log(params);

    let nextParams = Object.assign({}, params);
    nextParams.current_page = parseInt(pagingInfo.currentPage, 10) + 1;
    if (nextParams.current_page > pagingInfo.pages) {
      nextParams.current_page = pagingInfo.pages;
    }

    // urlにパラメータを追加
    let nextURL = new URL(currentURL);
    nextURL.search = new URLSearchParams(nextParams).toString();

    let prevParams = Object.assign({}, params);
    prevParams.current_page = parseInt(pagingInfo.currentPage, 10) - 1;
    if (prevParams.current_page < 1) {
      prevParams.current_page = 1;
    }

    // urlにパラメータを追加
    let prevURL = new URL(currentURL);
    prevURL.search = new URLSearchParams(prevParams).toString();

    let controlBar = document.createElement('div');
    controlBar.id = tag_id;

    let newButton = document.createElement('button');
    newButton.textContent = 'New';
    newButton.id = 'new-button';
    newButton.className = 'page-control-button';
    newButton.onclick = () => {
      showPanel('.recordEditPanel');
    };
    controlBar.appendChild(newButton);

    let filterButton = document.createElement('button');
    filterButton.textContent = 'Filter';
    filterButton.id = 'filter-button';
    filterButton.onclick = () => {
      showPanel('.filterPanel');
    };
    filterButton.className = 'page-control-button';
    controlBar.appendChild(filterButton);

    let separator = document.createElement('span');
    separator.textContent = ' | ';
    controlBar.appendChild(separator);

    if (params.writeable) { // テーブルが書き込み可能な場合
      let uploadButton = document.createElement('button');
      uploadButton.textContent = 'Upload';
      uploadButton.id = 'upload-button';
      uploadButton.className = 'page-control-button';
      uploadButton.onclick = () => uploadData('<%= targetTable %>', pagingInfo);
      controlBar.appendChild(uploadButton);
    }

    let downloadButton = document.createElement('button');
    downloadButton.textContent = 'Download';
    downloadButton.id = 'download-button';
    downloadButton.className = 'page-control-button';
    downloadButton.onclick = () => downloadData('<%= targetTable %>', pagingInfo);
    controlBar.appendChild(downloadButton);

    separator = document.createElement('span');
    separator.textContent = ' | ';
    controlBar.appendChild(separator);

    let prevButton = document.createElement('button');
    prevButton.id = 'page-prev';
    prevButton.className = 'page-control-button';
    prevButton.textContent = '<';
    prevButton.onclick = () => window.location.href = prevURL.toString();
    controlBar.appendChild(prevButton);

    let currentPage = document.createElement('input');
    currentPage.id = 'page-current';
    currentPage.type = 'text';
    currentPage.value = `${pagingInfo.currentPage}`;
    currentPage.onchange = (event) => {
      let jumpPage = currentPage.value;
      if (isNaN(jumpPage)) {
        return;
      }
      if (jumpPage < 1) {
        jumpPage = 1;
      } else if (jumpPage > pagingInfo.pages) {
        jumpPage = pagingInfo.pages;
      }
      let jumpParams = Object.assign({}, params);
      jumpParams.current_page = jumpPage;
      let jumpURL = new URL(currentURL);
      jumpURL.search = new URLSearchParams(jumpParams).toString();
      window.location.href = jumpURL.toString();

    };
    controlBar.appendChild(currentPage);

    let totalPage = document.createElement('span');
    totalPage.textContent = ` / ${pagingInfo.pages}`;
    controlBar.appendChild(totalPage);

    let nextButton = document.createElement('button');
    nextButton.textContent = '>';
    nextButton.id = 'page-next';
    nextButton.className = 'page-control-button';
    nextButton.onclick = () => window.location.href = nextURL.toString();
    controlBar.appendChild(nextButton);

    return controlBar;
  }

  async function uploadData(targetTable, pagingInfo) {
    console.log('uploadData: ' + targetTable);
    // ファイル選択ダイアログを表示
    let file = await showOpenFileDialog();
    // サーバーにファイルをアップロード
    let formData = new FormData();
    formData.append('file', file);
    formData.append('targetTable', targetTable);
    formData.append('currentUser', getCurrentUser());

    try {
      let currentUser = getCurrentUser();
      // アップロードは非同期で行う
      let response = fetch('<%= basePath %>/api/import/csv', {
        method: 'POST',
        body: formData
      });
      //alert('アップロードを開始しました');
    } catch (error) {
      // ブラウザのダイアログにエラーメッセージを表示
      alert('Error uploading file: ' + error.message);
      console.error(error);
    }

    console.log(file);

  }

  async function downloadData(targetTable, pagingInfo) {
    console.log('downloadData: ' + targetTable);
  }

  async function showOpenFileDialog() {
    return new Promise((resolve, reject) => {
      let input = document.createElement('input');
      input.type = 'file';
      input.onchange = () => {
        if (input.files.length > 0) {
          resolve(input.files[0]);
        } else {
          reject('No file selected');
        }
      };
      input.click();
    });
  }
</script>